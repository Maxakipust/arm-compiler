/*


function main(): number {
    thread {
        var y = 'y';
        putchar(y + 1);
        thread {
            var x = 'x';
            putchar(x + 1);
        }
        putchar('a');
    }

    return 0;
}

function main(): number {
    var x = 0;
    while(x < 100){
        thread{
            var st = itoa(x);
            var i = 0;
            while(i < length(st)){
                putchar(st[i]);
                i = i + 1;
            }
            putchar(10);
        }
        x = x + 1;
    }
}


function main(): number {
    var threads = [5 Thread];

    var i = 0;
    while(i < length(threads)){
        threads[i] = thread{
            sleep(i);
            putchar(i+48);
        };
        i = i + 1;
    }
    i = 0;
    while(i< length(threads)){
        waitpid(threads[i]);
        i = i + 1;
    }

    putchar('f');
    return 0;
}
*/

function printLn(str: Array<number>): void {
    var index = 0;
    while(index < length(str)){
        putchar(str[index]);
        index = index + 1;
    }
    putchar(10);
}

function mod(a:number, b:number): number{
    return a-(a/b*b);
}

function reverse(s: Array<number>): void {
    var i = 0;
    var j = length(s) -1;

    var c = 0;

    while(i < j){
        c = s[i];
        s[i] = s[j];
        s[j] = c;

        i = i + 1;
        j = j - 1;
    }
}  

function itoa(n: number): Array<number> {
    var i = 0;
    var sign = n;
    var ret = [100 number];

    if( n<0 ){
        n = n - ( 2 * n );
    }

    ret[i] = mod(n, 10);
    ret[i] = ret[i] + '0';
    i = i + 1;

    while(n / 10 > 0){
        n = n / 10;
        ret[i] = mod(n, 10) + '0';
        i = i + 1;
    }

    if(sign < 0){
        ret[i] = '-';
        i = i + 1;
    }
    ret[i] = 0;
    reverse(ret);
    return ret;
}

function main(): Thread {
    var threads = [101 Thread];
    var i = 0;
    while(i < length(threads)){
        threads[i] = thread {
            sleep(5);
            var x = mod(i, 26) + 'a';
            putchar(x);
            printLn(itoa(i));
        };
        i = i + 1;
    }
    var y = 0;
    while(y <length(threads)){
        waitpid(threads[y], 0, 0);
        y = y + 1;
    }
    return 0;
}