function print(str: Array<Number>): Void {
    var index = 0;
    while(index < length(str)){
        putchar(str[index]);
        index = index + 1;
    }
}

function printLn(str: Array<Number>): Void {
    print(str);
    putchar(10);
}

function mod(a:Number, b:Number): Number {
    return a-(a/b*b);
}

function reverse(s: Array<Number>): Void {
    var i = 0;
    var j = length(s) -1;

    var c = 0;

    while(i < j){
        c = s[i];
        s[i] = s[j];
        s[j] = c;

        i = i + 1;
        j = j - 1;
    }
}  

function itoa(n: Number): Array<Number> {
    var ret = [0 Number];
    var sign = n;

    if( n<0 ){
        n = n * (0-1);
    }

    ret = arrayAdd(ret, mod(n, 10) + '0');


    while(n / 10 > 0){
        n = n / 10;
        ret = arrayAdd(ret, mod(n, 10) + '0');
    }

    if(sign < 0){
        ret = arrayAdd(ret, '-');
    }
    ret = arrayAdd(ret, 0);
    reverse(ret);
    return ret;
}

function arrayAdd(arr: Array<Number>, num: Number):Array<Number>{
    var newArr = [(length(arr)+1) Number];
    var index = 0;
    while(index < length(arr)){
        newArr[index] = arr[index];
        index = index + 1;
    }
    newArr[length(newArr) - 1] = num;

    return newArr;
}

function wait(thread: Thread): Void{
    waitpid(thread, 0, 0);
}

